# Global
InvalidSpreadsheetException=InvalidSpreadsheetException
NoSpreadsheetException=NoSpreadsheetException
InvalidPolicyException=InvalidPolicyException
NoPolicyException=NoPolicyException
# RulesPolicy
RulesPolicy.Name=Benutzerdefinierte Regel Policy
RulesPolicy.Description=Policy für benutzerdefinierte Regeln
RulesPolicy.Background=Der Anwedungsbereich der Regel wird gegen die Bedingung(en) der Regel geprüft
RulesPolicy.Solution=Überprüfen Sie die Werte der Zellen.
RulesPolicy.CustomViolation=Die betroffenen Zellen verletzen die Bedingung(en) der Regel '{}'
# DynamicTestingPolicy
DynamicTestingPolicy.Name=Dynamische Policy
DynamicTestingPolicy.Description=Policy für dynamische Tests
DynamicTestingPolicy.Background=Die Excel-Mappe wird mit den im Szenario angegebenen Eingabewerten befüllt und neu berechnet. Anschließend werden die tatsächlich erhaltenen Werte mit den Werten verglichen, die im Szenario als erwartete Werte hinterlegt sind.
DynamicTestingPolicy.Solution=Stellen Sie sicher, dass die Formeln in der betroffenen Zelle sowie die darin enthaltenen Verweise korrekt sind. Prüfen Sie auch, ob die erwarteten Werte im Szenario plausibel sind.
DynamicTestingPolicy.ConditionViolation=Der nach Durchführung des Szenarios '{}' für die Zelle [{}] im Arbeitsblatt [{}] ist der berechnete Wert '{}' nicht
DynamicTestingPolicy.ConditionViolation.EQUALS=gleich dem erwarteten Wert '{}'!
DynamicTestingPolicy.ConditionViolation.LESS=kleiner wie der erwartete Wert '{}'!
DynamicTestingPolicy.ConditionViolation.LESS_OR_EQUAL=kleiner oder gleich wie der erwartete Wert '{}'!
DynamicTestingPolicy.ConditionViolation.GREATER=größer wie der erwartete Wert '{}'!
DynamicTestingPolicy.ConditionViolation.GREATER_OR_EQUAL=gleich oder größer wie der erwartete Wert '{}'!
DynamicTestingPolicy.InvariantViolation=Während der Durchführung des Szenarios '{}' hat sich der Wert für die Zelle [{}] im Arbeitsblatt [{}] geändert!
# ErrorContainingCellPolicy
ErrorContainingCellPolicy.Name=Fehler in Zellen
ErrorContainingCellPolicy.Description=Es wird geprüft ob der Wert einer Zelle ungültig ist.
ErrorContainingCellPolicy.Background=Fehler in Formeln führen zu ungültigen Werten in Zellen.
ErrorContainingCellPolicy.Solution=Bearbeiten Sie die Formel in der Zelle und stellen Sie sicher dass alle Verweise korrekte Werte liefern.
ErrorContainingCellPolicy.Violation=Im Arbeitsblatt [{}] in Zelle [{}] befindet sich ein Fehler!
# FormulaComplexityPolicy
FormulaComplexityPolicy.Name=Formelkomplexität
FormulaComplexityPolicy.Description=Es wird geprüft ob die Formelkomplexität einen gewissen Grad überschreitet (gemessen an der Schachtelungstiefe und der Anzahl von Operatoren)
FormulaComplexityPolicy.Background=Zu komplexe Formeln sind schwer zu verstehen und fehleranfällig bei der Wartung.
FormulaComplexityPolicy.Solution=Brechen sie zu komplexe Formeln in kleinere, weniger komplexe Formeln auf.
FormulaComplexityPolicy.Violation=Im Arbeitsblatt [{}] in Zelle [{}] befindet sich eine Formel mit hoher Komplexität!
FormulaComplexityPolicy.Violation.Operations=Zahl der Operationen '{}' überschreitet die empfohlene Anzahl an Operationen '{}'.
FormulaComplexityPolicy.Violation.Nesting=Die Schachtelungstiefe '{}' überschreitet die maximal empfohlene Schachtelungstiefe '{}'.
# MultipleSameRefPolicy
MultipleSameRefPolicy.Name=Gleiche Verweise hintereinander
MultipleSameRefPolicy.Description=Prüft ob eine Formel mehrere gleiche Verweise hintereinander enthält.
MultipleSameRefPolicy.Background=Zwei oder mehr Verweise auf die gleiche Zelle, die direkt hintereinander in einer Formel verwendet werden sind meist unbeabsichtigt und können daher ein Indikator für eine potenziell fehlerhafte Formel sein.
MultipleSameRefPolicy.Solution=Prüfen Sie die Formel und stellen Sie sicher, dass die Verwendung der Verweise tatsächlich so beabsichtigt ist.
MultipleSameRefPolicy.Violation=Im Arbeitsblatt [{}] verweist die Formel in Zelle [{}] {} mal hintereinander auf die Zelle [{}] im Arbeitsblatt [{}].
# NoConstantsInFormulasPolicy
NoConstantsInFormulasPolicy.Name=Konstanten in Formeln
NoConstantsInFormulasPolicy.Description=Es wird geprüft ob Formeln Konstanten enthalten.
NoConstantsInFormulasPolicy.Background=Konstanten in Formeln erschweren später die Wartung: Sollten sich ihre Werte ändern kann es sehr aufwändig und fehlerträchtig werden, sie zu ersetzen.
NoConstantsInFormulasPolicy.Solution=Extrahieren Sie Konstanten in eigene Zellen und erstellen Sie einen Verweis auf diese Zellen.
NoConstantsInFormulasPolicy.Violation=Im Arbeitsblatt [{}] in Zelle [{}] wurde in der Formel '{}' die Konstante vom Typ '{}' mit dem Wert '{}' gefunden.
# NonConsideredValuesPolicy
NonConsideredValuesPolicy.Name=Nicht genutzte Werte
NonConsideredValuesPolicy.Description=Es wird geprüft ob Werte in Formeln genutzt werden.
NonConsideredValuesPolicy.Background=Nicht genutzte Werte können Fehler in Spreadsheets sein, wenn etwa Verweise in Formeln geändert oder gelöscht werden.
NonConsideredValuesPolicy.Solution=Nutzen Sie die Werte in den betroffenen Zellen, oder ignorieren Sie diese Warnung für diese Zelle.
NonConsideredValuesPolicy.Violation=Der Wert der Zelle [{}] im Arbeitsblatt [{}] wird nicht genutzt.
# OneAmongOthersPolicy
OneAmongOthersPolicy.Name=Ein Wert unter Gleichen
OneAmongOthersPolicy.Description=Es wird geprüft ob sich in der Umgebung eines Werts andere Werte mit dem gleichen Typ befinden.
OneAmongOthersPolicy.Background=Einzelne Werte mit anderem Typ als die Umgebungszellen können auf einen Fehler hinweisen.
OneAmongOthersPolicy.Solution=Stellen Sie sicher dass der Typ des Zellenwerts korrekt ist oder ignorieren Sie diese Warnung.
OneAmongOthersPolicy.Violation=Der Wert der Zelle [{}] im Arbeitsblatt [{}] hat einen anderen Typ '{}' als die Werte in seiner Umgebung.
# ReadingDirectionPolicy
ReadingDirectionPolicy.Name=Leserichtung
ReadingDirectionPolicy.Description=Prüft, ob Zellen mit Formeln nur auf Zellen links oder oberhalb verweisen.
ReadingDirectionPolicy.Background=Zellen mit Formeln sollten nur auf Zellen links oder oberhalb von sich verweisen, weil das die übliche westliche Leserichtung ist.
ReadingDirectionPolicy.Solution=Verschieben Sie die Zelle mit der Formel oder die Zellen, auf die sich die Zelle bezieht.
ReadingDirectionPolicy.Violation=Im Arbeitsblatt [{}] in Zelle [{}] gibts es Verweise entgegen der Leserichtung.
ReadingDirectionPolicy.Violation.leftRight=Das Ziel des Verweises '{}' befindet sich rechts der Quelle.
ReadingDirectionPolicy.Violation.topBottom=Das Ziel des Verweises '{}' befindet sich unterhalb der Quelle.
# RefToNullPolicy
RefToNullPolicy.Name=Verweise auf leere Zellen
RefToNullPolicy.Description=Prüft ob Formeln auf leere Zellen verweisen.
RefToNullPolicy.Background=Verweise auf leere Zellen sind oft Fehler in Spreadsheets.
RefToNullPolicy.Solution=Stellen Sie sicher dass der Verweis auf die gewünschte Zelle zeigt und dass diese einen gültigen Wert besitzt.
RefToNullPolicy.Violation=Im Arbeitsblatt [{}] in Zelle [{}] enthält die Formel '{}' einen Verweis auf eine leere Zelle.
# StringDistancePolicy
StringDistancePolicy.Name=Levenshtein-Distanz
StringDistancePolicy.Description=Bestimmt die Levenshtein-Distanz zwischen einzelnen Zellen.
StringDistancePolicy.Background=Die Levenshtein-Distanz (auch Editierdistanz) zwischen zwei Zeichenketten ist die minimale Anzahl von Einfüge-, Lösch- und Ersetz-Operationen, um die erste Zeichenkette in die zweite Zeichenkette umzuwandeln.
StringDistancePolicy.Solution=Prüfen sie die Zellen mit Verstößen auf Tippfehler.
StringDistancePolicy.Violation=Die Levenshtein-Distanz im Arbeitsblatt [{}] zwischen Zelle [{}] und Zelle [{}] ist geringer als die minimal erlaubte Distanz.
# SanityChecksPolicy
SanityChecksPolicy.Name=SanityChecksPolicy.Name
SanityChecksPolicy.Description=SanityChecksPolicy.Description
SanityChecksPolicy.Background=SanityChecksPolicy.Background
SanityChecksPolicy.Solution=SanityChecksPolicy.Solution
SanityChecksPolicy.Violation=SanityChecksPolicy.Violation